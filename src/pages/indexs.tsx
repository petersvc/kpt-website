/* eslint-disable @next/next/no-page-custom-font */
import type { NextPage } from 'next'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import React, { useState, useLayoutEffect } from 'react'
import axios from 'axios'
import Header from '../components/Header'
import LeftSidebar from '../components/leftSidebar/leftSidebar'
import GpusTable from '../components/GpusTable'
import Stores from '../components/Stores'
import { BiSortDown } from 'react-icons/bi'
//import createData from '../services/util'

const print = console.log

interface gpu {
  model: string
  serie: string
  manufactor: string
  brand: string
  name: string
  link: string
  price: string
  priceInt: number
  image: string
  store: string
}

type Props = {
  gpusData: Array<gpu>
}

export const getServerSideProps: GetServerSideProps = async () => {
  const response = await axios.get('http://localhost:3000/api/gpus')
  const { gpusData } = await response.data
  return {
    props: { gpusData: gpusData }
  }
}

const Home: NextPage<Props> = ({ gpusData }) => {
  const [sortGpu, setSortGpu] = useState({ type: 'Preço', isDown: true })
  //console.log(Gpu)

  function findMax() {
    return gpus.reduce(
      (acc, val) => (val.priceInt > acc ? val.priceInt : acc),
      Number.MIN_VALUE
    )
  }

  function findMin() {
    return gpus.reduce(
      (acc, val) => (val.priceInt < acc ? val.priceInt : acc),
      Number.MAX_VALUE
    )
  }

  const newArr: gpu[] = []

  const countingSort = (arr: gpu[], max: number, min: number) => {
    print('sorting')
    const counts: gpu[][] = []
    for (let i = min; i <= max; i++) {
      counts[i] = new Array<gpu>()
    }

    arr.forEach((c: gpu) => {
      counts[c.priceInt].push(c)
    })

    counts.forEach((count) => {
      count.forEach((c: gpu) => {
        newArr.push(c)
      })
    })
    setGpus(newArr)
    print('done')
  }

  const sortGpus = (typeProp: string) => {
    const start: number = performance.now()
    print(typeProp)
    setSortGpu({ type: typeProp, isDown: !sortGpu.isDown })
    print(sortGpu)
    gpus.sort(sortByType)
    const end: number = performance.now()
    print(sortGpu)

    print(Number(end - start))
  }

  const sortByType = (a: gpu, b: gpu) => {
    // print('sorting By Type')
    let value1 = ''
    let value2 = ''
    let value1int = 0
    let value2int = 0

    switch (sortGpu.type) {
      case 'Nome':
        value1 = a.model
        value2 = b.model
        break
      case 'Modelo':
        value1 = a.model
        value2 = b.model
        break
      case 'Serie':
        value1 = a.serie
        value2 = b.serie
        break
      case 'Marca':
        value1 = a.brand
        value2 = b.brand
        break
      case 'Fabricante':
        value1 = a.manufactor
        value2 = b.manufactor
        break
      case 'Loja':
        value1 = a.store
        value2 = b.store
        break
      default:
        value1int = a.priceInt
        value2int = b.priceInt
    }

    //ORDER
    if (sortGpu.type === 'Preço') {
      //print('Preço')
      if (sortGpu.isDown) {
        //print('isDown')
        return value1int - value2int
      } else {
        //print('isUp')
        return value2int - value1int
      }
    } else {
      if (sortGpu.isDown) {
        return value1 > value2 ? 1 : value2 > value1 ? -1 : 0
      } else {
        return value1 < value2 ? 1 : value2 < value1 ? -1 : 0
      }
    }
  }

  function dale2() {
    const start: number = performance.now()
    countingSort(gpus, findMax(), findMin())
    const end: number = performance.now()
    print(Number(end - start))
  }

  const [gpus, setGpus] = useState<gpu[]>([])
  const [gpusRaw, setGpusRaw] = useState<gpu[]>([])
  const [loading, setLoading] = useState(true)

  useLayoutEffect(() => {
    setGpus(gpusData)
    setGpusRaw(gpusData)
    setLoading(false)
  }, [gpusData, loading])

  //loading ? countingSort(gpus, findMax(), findMin()) : null

  return (
    <>
      {!loading ? (
        <div
          className={
            'mainDiv w-screen font-fancy font-normal text-text h-screen grid grid-cols-20 grid-rows-30 bg-bgMain overflow-x-hidden z-1'
          }
        >
          <Head>
            <title>KPT</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link
              rel="preconnect"
              href="https://fonts.gstatic.com"
              crossOrigin="anonymous"
            />
            <link
              href="https://fonts.googleapis.com/css2?family=Titillium+Web:wght@300;400;600;700&display=swap"
              rel="stylesheet"
            />
          </Head>

          <Header />

          <LeftSidebar
            gpusRaw={gpusRaw}
            gpus={gpus}
            setGpus={setGpus}
            sortGpu={sortGpu}
          />

          <div
            className={
              'col-start-4 col-span-full row-start-3 row-span-full ml-6 mt-4 flex flex-col'
            }
          >
            <Stores gpusRaw={gpusRaw} gpus={gpus} />

            <div
              className={
                'flex flex-col w-[98.8%]  mt-1 pr-5 pl-6 overflow-y-scrolls mb-6 bg-bgContentt rounded-xl'
              }
            >
              <div
                className={
                  'flex flex-row w-full text-md bg-[rgb(40,100,20)]/ py-5 border-b border-borders transition duration-500 linear group'
                }
              >
                <button
                  className={
                    'flex justify-center items-center ml-3 text-[rgb(100,100,100)]'
                  }
                  onClick={() => dale2()}
                >
                  <BiSortDown size={50} />
                </button>
                {[
                  'Nome',
                  'Preço',
                  'Marca',
                  'Modelo',
                  'Serie',
                  'Fabricante',
                  'Loja'
                ].map((value) => (
                  <div
                    key={value}
                    className={`flex flex-row ${
                      value != 'Nome' ? 'w-[10%]' : 'w-[40%]'
                    }`}
                  >
                    <h1 className={'opacity-[1]'}>{value}</h1>
                    <button
                      className={
                        'flex justify-center items-center ml-3 text-[rgb(100,100,100)]'
                      }
                      onClick={() => sortGpus(value)} //countingSort(gpus, findMax(), findMin())}
                    >
                      <BiSortDown size={20} />
                    </button>
                  </div>
                ))}
              </div>

              <GpusTable gpus={gpus} />
            </div>
          </div>
        </div>
      ) : null}
    </>
  )
}

export default Home
